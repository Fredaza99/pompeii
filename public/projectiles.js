let projectileLoopRunning = false;
let glowParticles = [];
let projectiles = []; // ‚úÖ Garante que o array existe antes de ser usado




function fireProjectile(startX, startY, targetX, targetY) {
    console.log("üî• Disparando √∫nico proj√©til luminoso!");

    let mainColor = "rgb(3, 205, 255)"; // Cor brilhante do proj√©til

    let newProjectile = {
        x: startX,
        y: startY,
        targetX,
        targetY,
        velocityX: (targetX - startX) * 0.05, // Ajustando velocidade para um impacto mais r√°pido
        velocityY: (targetY - startY) * 0.05,
        size: 24, // Tamanho do proj√©til
        color: mainColor,
    };

    createGlowParticles(startX, startY);

    projectiles = [newProjectile]; // üî• Substitui a lista por um √∫nico proj√©til
}


function createGlowParticles(x, y) {
    let color = "rgba(160, 50, 255, 1)"; // üü£ Roxo m√°gico (cor fixa)

    glowParticles.push({
        x,
        y,
        size: Math.random() * 3 + 2,
        opacity: 1,
        velocityX: (Math.random() - 0.5) * 2,
        velocityY: (Math.random() - 0.5) * 2,
        color: color // üî• Agora todas as fa√≠scas t√™m cor!
    });
}















function drawProjectiles() {
    frameCount++;

    projectiles.forEach((p) => {
        drawGlowingProjectile(ctx, p.x, p.y, p.color); // üî• Desenha o proj√©til
        createSparkEffect(p.x, p.y); // üî• Adiciona fa√≠scas
    });

    drawSparks(); // üî• Renderiza as fa√≠scas na tela
}







        
        
        
        
        
        


function createTrailEffect(x, y, velocityX, velocityY) {
    for (let i = 0; i < 5; i++) { // üî• Gera mais part√≠culas para um rastro denso
        glowParticles.push({
            x: x - velocityX * i * 2, // üî• Distribui as part√≠culas ao longo da trajet√≥ria
            y: y - velocityY * i * 2,
            size: Math.random() * 6 + 3, // üî• Part√≠culas maiores para dar volume (3 a 9 px)
            opacity: 1,
            velocityX: (Math.random() - 0.5) * 0.3, // üîπ Movimento levemente aleat√≥rio
            velocityY: (Math.random() - 0.5) * 0.3,
            decay: Math.random() * 0.02 + 0.01 // üîπ Define a velocidade de desaparecimento
        });
    }
}






function createSparkEffect(x, y) {
    let color = "rgba(160, 50, 255, 1)"; // üü£ Roxo m√°gico (cor fixa)

    for (let i = 0; i < 3; i++) { // n√∫mero de fa√≠scas
        glowParticles.push({
            x,
            y,
            size: 12, // üî• Todas as part√≠culas ter√£o 8px de tamanho
            opacity: 1,
            velocityX: (Math.random() - 0.5) * 4, // üî• Movimento menor para menos espalhamento
            velocityY: (Math.random() - 0.5) * 4,
            decay: Math.random() * 0.08 + 0.05,
            color: color
        });
    }
}


function drawSparks() {
    
    for (let i = glowParticles.length - 1; i >= 0; i--) {
        let p = glowParticles[i];

        ctx.fillStyle = Math.random() < 0.5
            ? `rgba(120, 255, 214, ${p.opacity})` // üíÄ Azul-esverdeado espectral
            : `rgba(80, 200, 255, ${p.opacity})`; // üî• Ciano fantasmag√≥rico

        ctx.beginPath();
        ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
        ctx.fill();

        p.opacity -= 0.03; // üî• Desaparece mais devagar (antes 0.1)
        p.size = Math.max(p.size - 0.1, 0.5); // üî• Garante que nunca seja menor que 0.5


        if (p.opacity <= 0) {
            glowParticles.splice(i, 1);
        }
    }
}




function drawFlare(ctx, x, y) {
    drawMetallicProjectile(ctx, x, y); // üî• Agora cria um efeito de rastro suave
}



function drawGlowParticles() {
    for (let i = glowParticles.length - 1; i >= 0; i--) {
        let p = glowParticles[i];

        if (!p.color) {
            console.warn("‚ö†Ô∏è Fa√≠sca sem cor detectada! Aplicando cor fixa.");
            p.color = "rgba(160, 50, 255, 1)"; // üü£ Garante que sempre ser√° roxo
        }

        ctx.fillStyle = p.color; // üî• Usa a cor armazenada corretamente
        ctx.globalAlpha = p.opacity;
        ctx.beginPath();
        ctx.arc(p.x, p.y, p.size, 0, Math.PI * 2);
        ctx.fill();

        p.opacity -= p.decay;
        p.size *= 0.95;

        if (p.opacity <= 0.1) {
            glowParticles.splice(i, 1);
        }
    }
    ctx.globalAlpha = 1;
}



function drawGlowingProjectile(ctx, x, y, color) {
    let size = 24; // üîπ Tamanho do proj√©til maior

    let gradient = ctx.createRadialGradient(x, y, 4, x, y, 16); // üî• Glow maior
    gradient.addColorStop(0, "rgba(120, 255, 214, 1)");  // üíÄ Verde azulado forte no centro
    gradient.addColorStop(0.5, "rgba(90, 200, 255, 0.8)"); // üîπ Azul et√©reo brilhante
    gradient.addColorStop(1, "rgba(0, 100, 150, 0)"); // üî• Dissolve num azul escuro espectral

    ctx.fillStyle = gradient;
    ctx.beginPath();
    ctx.arc(x, y, size, 0, Math.PI * 2); // üîπ Proj√©til maior (raio 8)
    ctx.fill();

    // üîπ Gera fa√≠scas com controle reduzido
    if (Math.random() < 1) { // üî• 50% de chance de soltar fa√≠sca, reduzindo a quantidade
        createSparkEffect(x, y);
    }
}



let frameCount = 0;






// Cria um efeito de impacto ao atingir o alvo
function createImpactEffect(x, y) {
    impacts.push({ x, y, size: 15, opacity: 1 });
}

// Atualiza e desenha os impactos
function drawImpacts() {
    impacts.forEach((impact, index) => {
        ctx.fillStyle = `rgba(255, 140, 0, ${impact.opacity})`;
        ctx.beginPath();
        ctx.arc(impact.x, impact.y, impact.size, 0, Math.PI * 2);
        ctx.fill();

        impact.size += 2;
        impact.opacity -= 0.05;

        if (impact.opacity <= 0) {
            impacts.splice(index, 1);
        }
    });

    requestAnimationFrame(drawImpacts);
}

function lerp(start, end, t) {
    return start + (end - start) * t;
}

function updateProjectiles() {
    for (let i = projectiles.length - 1; i >= 0; i--) {
        let p = projectiles[i];


        let t = 0.1; // Suaviza o movimento
        let newX = lerp(p.x, p.x + p.velocityX, t);
        let newY = lerp(p.y, p.y + p.velocityY, t);

        if (isNaN(newX) || isNaN(newY)) {
            console.error(`üö® ERRO: Movimento inv√°lido para proj√©til ${i}. Removendo.`);
            projectiles.splice(i, 1);
            continue;
        }

        p.x = newX;
        p.y = newY;

        if (isNaN(p.rotation)) {
            console.warn(`‚ö†Ô∏è Corrigindo rota√ß√£o inv√°lida para proj√©til ${i}`);
            p.rotation = 0;
        }


        let dx = p.targetX - p.x;
        let dy = p.targetY - p.y;
        let distance = Math.sqrt(dx * dx + dy * dy);

        if (distance < 5) {
            createImpactEffect(p.targetX, p.targetY);
            projectiles.splice(i, 1);
            console.log("üí• Proj√©til atingiu o alvo e foi removido!");
        }
    }

    requestAnimationFrame(updateProjectiles);
}





function startProjectileLoop() {
    if (!projectileLoopRunning) {
        console.log("üéØ Iniciando loop de atualiza√ß√£o dos proj√©teis...");
        projectileLoopRunning = true;
        updateProjectiles();
    } else {
        console.log("üîÑ Loop de proj√©teis j√° est√° rodando!");
    }
}


















